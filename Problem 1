1. Two Sum
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

给定一个数，找出list中两个数之和为该数，返回这链各个数字的索引值

思路1：
class Solution:
    def twoSum(self, nums, target):
        
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        if len(nums) <2 :
            return None
        
        elif len(nums) == 2:
            
            if sum(nums) != target:
                return None
            else:
                return [0, 1]
                
        elif len(nums) > 2:  
        
            for i, v in enumerate(nums):
                a = target -v 
                n = nums[i+1:]
                if a in n:
                # a==v的情况需要判断
                    if a == v:
                        return [i, n.index(a)+i+1]
                    else:
                        return [i, nums.index(a)]              
            return None
            
思路2：
class Solution:
    def twoSum(self, nums, target):
        
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        d = {}
        for i, v in enumerate(nums):
          if (target-v) in d:
            return [d[target-v], i]
           d[v] = i
