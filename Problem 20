20. Valid Parentheses
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

题目：判断字符串是否为有效的配对 难度：easy
思路：栈最典型的应用就是验证配对情况，作为有效的括号，有一个右括号就必定有一个左括号在前面，
所以我们可以将左括号都push进栈中，遇到右括号的时候再pop来消掉。
这里不用担心连续不同种类左括号的问题，因为有效的括号对最终还是会有紧邻的括号对。
在python里，可以用list表示栈，append相当于入栈， pop相当于出栈

class Solution:
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        dicts = {"]":"[", "}":"{", ")":"("}
        stack = []
        for char in s:
            if char in dicts.values():
                stack.append(char) #元素入栈
            elif char in dicts.keys():
                if stack == [] or dicts[char]!=stack.pop(): # 若不为空，或出栈元素不匹配
                    return False
            else:
                return False
        return stack == [] #最终栈需要为空才能为合法
